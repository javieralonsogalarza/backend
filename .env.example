<?php
public function partidoStore(Request $request)
{
    $Result = (object)['Success' => false, 'Message' => null, 'Errors' => null];

    try {
        DB::beginTransaction();

        $jugadores = $this->grupoTablaPartialView($request->torneo_id, $request->torneo_categoria_id, $request->grupo_id, false, false);

        // Convertir cada elemento en un objeto y guardar la posiciÃ³n de cada jugador
        $jugadores = collect($jugadores)->map(function ($jugador, $index) {
            $jugador = (object) $jugador;
            $jugador->posicion = $index;
            return $jugador;
        });

        $request->merge([
            'doubleWo' => trim($request->resultado) == "-",
            'fase_inicial' => filter_var($request->fase_inicial, FILTER_VALIDATE_BOOLEAN)
        ]);

        $Validator = Validator::make($request->all(), [
            'fecha_inicio' => 'required|date|date_format:Y-m-d',
            'fecha_final' => 'required|date|date_format:Y-m-d|after_or_equal:fecha_inicio',
            'resultado' => 'required',
            'jugador_local_id' => $request->doubleWo ? 'nullable' : 'required',
            'jugador_local_set' => 'required|numeric',
            'jugador_local_juego' => 'required|numeric',
            'jugador_rival_id' => $request->doubleWo ? 'nullable' : 'required',
            'jugador_rival_set' => 'required|numeric',
            'jugador_rival_juego' => 'required|numeric'
        ], [
            'jugador_local_id.required' => 'El jugador local es obligatorio.',
            'jugador_rival_id.required' => 'El jugador rival es obligatorio.'
        ]);

        if (!$Validator->fails()) {
            if (!$request->doubleWo && $request->jugador_local_id == $request->jugador_rival_id) {
                $Result->Message = "El jugador ganador no puede ser el mismo al jugador rival";
            } else if (!$request->doubleWo && $request->jugador_rival_set > $request->jugador_local_set) {